<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/03/09/test/"/>
    <url>/2024/03/09/test/</url>
    
    <content type="html"><![CDATA[<p>111</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java笔记汇总</title>
    <link href="/2024/03/08/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%B1%87%E6%80%BB/"/>
    <url>/2024/03/08/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="it-is-just-my-personal-learning-notes-1序言回想自从系统学完C语言后，很少在系统学一门编程语言，python听得时候天天摆烂，以至于学完了还是一团浆糊，直到大二开始在leetcode刷题才有所深入了解，看来学习还是得付诸于时间才行。正好这段时间在经营博客，有事没事往上面扔点东西，挺好的"><a href="#it-is-just-my-personal-learning-notes-1序言回想自从系统学完C语言后，很少在系统学一门编程语言，python听得时候天天摆烂，以至于学完了还是一团浆糊，直到大二开始在leetcode刷题才有所深入了解，看来学习还是得付诸于时间才行。正好这段时间在经营博客，有事没事往上面扔点东西，挺好的" class="headerlink" title="it is just my personal learning notes# 1序言回想自从系统学完C语言后，很少在系统学一门编程语言，python听得时候天天摆烂，以至于学完了还是一团浆糊，直到大二开始在leetcode刷题才有所深入了解，看来学习还是得付诸于时间才行。正好这段时间在经营博客，有事没事往上面扔点东西，挺好的  "></a>it is just my personal learning notes<br><span id="more"></span><br># 1序言<br>回想自从系统学完C语言后，很少在系统学一门编程语言，python听得时候天天摆烂，以至于学完了还是一团浆糊，直到大二开始在leetcode刷题才有所深入了解，看来学习还是得付诸于时间才行。<br>正好这段时间在经营博客，有事没事往上面扔点东西，挺好的  </h2><!-- toc --><h1 id="2-java基本内容"><a href="#2-java基本内容" class="headerlink" title="2 java基本内容"></a>2 java基本内容</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><p>官方白皮书给出了如下关键字：简单性（接近C++）、面向对象（支持多重继承）、分布式、健壮性（优秀的指针模型）、安全性（复杂的安全模型）、体系结构中立（Java虚拟机）、可移植性（众多平台独立的Java库）、解释型（轻量的编译过程）、高性能（即时编译器）、多线程、动态性。</p><h2 id="2-2-java的程序结构"><a href="#2-2-java的程序结构" class="headerlink" title="2.2 java的程序结构"></a>2.2 java的程序结构</h2><p>java程序是以类为单位的，类则是一种自定义数据结构（类似于C中的结构体struct）。上面的程序包含了一个public类型的class（类），Hello是这个类的类名，这名称需和文件名同名。和C语言一样，Java也是大小写敏感的。习惯上将类名的每个单词首字母大写。  </p><p>这个类中包含了一个main方法（也就是函数），作为这个Java程序的运行起点。这个方法中包含了该程序的所有逻辑，和C非常相似。</p><h2 id="2-3数据类型"><a href="#2-3数据类型" class="headerlink" title="2.3数据类型"></a>2.3数据类型</h2><p>java跟c&#x2F;c++一样，数据元素有不同的数据类型<br>整型:byte(1字节),short(2个字节),int(4个字节),long(8个字节)<br>浮点类型:float(4字节),double(8字节)<br>字符类型 char<br>布尔类型 boolean  </p><h2 id="2-4输入输出"><a href="#2-4输入输出" class="headerlink" title="2.4输入输出"></a>2.4输入输出</h2><p>这点我认为java比较繁琐<br>首先头文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure><p>输入输出  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(in.nextInt());</span><br><span class="line">System.out.println(in.nextLine());</span><br></pre></td></tr></table></figure><h2 id="2-5-流程控制"><a href="#2-5-流程控制" class="headerlink" title="2.5 流程控制"></a>2.5 流程控制</h2><p>流程控制<br>Java中也有块（block）的概念。大多数内容都和C一致，除了嵌套的块中不能声明重名变量。下面说一下流程控制语句：  </p><p>if-else if-else 和C一样<br>while&#x2F;do-while 和C一样<br>for 和C一样。不过添加了一种for each循环<br>switch 和C一样。不过从Java SE 7 开始，case标签可以是字符串字面量<br>break 后面可以带标签，用法和C中的goto一样。不过只能跳出语句块而不能跳入<br>continue 和C一样  </p><h2 id="2-6-高精度算法-大数值"><a href="#2-6-高精度算法-大数值" class="headerlink" title="2.6 高精度算法(大数值)"></a>2.6 高精度算法(大数值)</h2><p>这个是一个可以说说的话题，还记着我大一下有门程序设计课，大作业就是完成各种常见的数据结构，其中就有一个高精度算法的C语言实现，但当时gpt水水就完事了，内在逻辑一点不清楚，看acwing的时候，惊奇听人说python一行就完事儿。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">input</span>())*<span class="built_in">int</span>(<span class="built_in">input</span>()))</span><br></pre></td></tr></table></figure><p>注意这里是分行输入 看来以后还得写篇python<br>而java的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInterger</span> <span class="variable">a</span> <span class="operator">=</span> BigInterger.valueOf(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="2-7-数组"><a href="#2-7-数组" class="headerlink" title="2.7 数组"></a>2.7 数组</h2><p>这个东西还挺烦人，刚学的时候一直记不住</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> []ss = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">100</span>]<span class="comment">//和cpp不一样的是，[]在前面写着</span></span><br><span class="line"><span class="type">int</span> []ss = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>技术文档修改版</title>
    <link href="/2024/03/02/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    <url>/2024/03/02/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>Obsdian first try </p><span id="more"></span><h1><span id="lalalalaalaa">lalalalaalaa</span></h1><p><strong>markdown</strong><br><em>markdown</em></p><h1><span id="我怀念的是无话不说">我怀念的，是无话不说</span></h1><h1><span id="this-is-a-heading">this is a heading</span></h1>在Python语言中最常见的括号有三种，分别是：小括号（）、中括号[]、花括号{}；其作用也不相同，分别用来代表不同的Python基本内置数据类型。<p>Python中的小括号（）：</p><p>代表tuple元祖数据类型，元祖是一种不可变序列。创建方法很简单，大多数时候都是小括号括起来的</p><p>1 &gt;&gt;&gt; tup &#x3D; (1,2,3)<br>2 &gt;&gt;&gt; tup<br>3 (1, 2, 3)<br>4 &gt;&gt;&gt; () #空元祖<br>5 ()<br>6 &gt;&gt;&gt; 55,#一个值的元祖<br>7 (55,)</p><p>Python中的中括号[]：</p><p>代表list列表数据类型，列表是一种可变序列。创建方法既简单又特别。</p><p>原来list（）是调用函数啊，这样我就好理解的，那意思就是list(‘ABC’)，调用了list这个函数，ABC就形成了一个有3个元素的列表，其中三个元素分别是A、B、C，而X&#x3D;[‘ABC’]，是本身列了一个列表，里面只有一个元素，元素是ABC</p><p>1 &gt;&gt;&gt; list(‘Python’)<br>2 [‘P’, ‘y’, ‘t’, ‘h’, ‘o’, ‘n’]  </p><p>那如果我要用调用list函数表示一个列表，里面只有一个元素，元素是ABC，怎么表示呢<br> list([‘ABC’])<br>Python中的花括号{}：</p><p>代表dict字典数据类型，字典是Python中唯一内建的映射类型。字典中的值没有特殊的顺序，但都是存储在一个特定的键（key）下。键可以是数字、字符串甚至是元祖。</p><p>1 &gt;&gt;&gt; dic &#x3D; {‘jon’:’boy’,’lili”‘:’girl’}<br>2 &gt;&gt;&gt; dic<br>3 {‘jon’: ‘boy’, ‘lili”‘: ‘girl’}<br>[[我也是一个笔记]]<br>我要讲到的是[[垃圾回收]]</p>]]></content>
    
    
    <categories>
      
      <category>markdown测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPP STL</title>
    <link href="/2024/03/02/stl/"/>
    <url>/2024/03/02/stl/</url>
    
    <content type="html"><![CDATA[<p>STL的用法 方便自己回看</p><span id="more"></span><!-- toc --><h1 id="1-vector-变长数组"><a href="#1-vector-变长数组" class="headerlink" title="1. vector(变长数组)"></a>1. vector(变长数组)</h1><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;ss;<span class="comment">//一维数组</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">ss</span>(n+<span class="number">1</span>,<span class="number">0</span>)<span class="comment">//n+1个0元素</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;ss;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;ss[<span class="number">5</span>]<span class="comment">//行不可变 列可变长数组</span></span><br></pre></td></tr></table></figure><h3 id="拷贝初始化"><a href="#拷贝初始化" class="headerlink" title="拷贝初始化"></a>拷贝初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(a)</span></span>; <span class="comment">// 两个数组中的类型必须相同,a和b都是长度为n+1，初始值都为0的数组</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; c = a; <span class="comment">// 也是拷贝初始化,c和a是完全一样的数组</span></span><br></pre></td></tr></table></figure><p>vector<int> v[5]可以这样理解：长度为5的v数组，数组中存储的是vector<int> 数据类型，而该类型就是数组形式，故v为二维数组。其中每个数组元素均为空，因为没有指定长度，所以第二维可变长。可以进行下述操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h1 id="1-2-函数方法"><a href="#1-2-函数方法" class="headerlink" title="1.2 函数方法"></a>1.2 函数方法</h1><p>STL的函数方法一般分为删除、添加、查找。<br>以数组ss举例  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ss.<span class="built_in">front</span>()<span class="comment">//展示ss的第一个元素</span></span><br><span class="line">ss.<span class="built_in">front</span>()<span class="comment">//展示ss的最后一个元素</span></span><br><span class="line">ss.<span class="built_in">push_back</span>(element)<span class="comment">//向数组末尾添加一个元素</span></span><br><span class="line">ss.<span class="built_in">size</span>()返回实际数据个数（<span class="type">unsigned</span>类型）  </span><br><span class="line">ss.<span class="built_in">clear</span>()清除元素个数<span class="built_in">O</span> ( N ) <span class="built_in">O</span>(N)<span class="built_in">O</span>(N)，N为元素个数</span><br><span class="line">ss.<span class="built_in">resize</span>(n, v)改变数组大小为n,n个空间数值赋为v，如果没有默认赋值为<span class="number">0</span>  </span><br><span class="line">ss.<span class="built_in">insert</span>(it, x)向任意迭代器it插入一个元素x  </span><br><span class="line">例：ss.<span class="built_in">insert</span>(ss.<span class="built_in">begin</span>() + <span class="number">2</span>,<span class="number">-1</span>)将<span class="number">-1</span>插入ss[<span class="number">2</span>]的位置</span><br><span class="line">ss.<span class="built_in">erase</span>(first,last)删除[first,last)的所有元素  </span><br><span class="line">ss.<span class="built_in">begin</span>()返回首元素的迭代器（通俗来说就是地址）  </span><br><span class="line">ss.<span class="built_in">end</span>()返回最后一个元素后一个位置的迭代器（地址）  </span><br><span class="line">ss.<span class="built_in">empty</span>()判断是否为空，为空返回真，反之返回假  </span><br></pre></td></tr></table></figure><h1 id="1-3数组的访问"><a href="#1-3数组的访问" class="headerlink" title="1.3数组的访问"></a>1.3数组的访问</h1><h3 id="1-3-1-下标访问"><a href="#1-3-1-下标访问" class="headerlink" title="1.3.1 下标访问"></a>1.3.1 下标访问</h3><p>和正常数组一样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ss.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">  cout&lt;&lt;ss[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-迭代器访问"><a href="#1-3-2-迭代器访问" class="headerlink" title="1.3.2 迭代器访问"></a>1.3.2 迭代器访问</h3><p>不细说了</p><h3 id="1-3-3-智能指针访问"><a href="#1-3-3-智能指针访问" class="headerlink" title="1.3.3 智能指针访问"></a>1.3.3 智能指针访问</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> val : v) &#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">//s[0],s[1]...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- toc --><h1 id="2-stack"><a href="#2-stack" class="headerlink" title="2. stack"></a>2. stack</h1><p>-<del>这是分割线</del></p><h2 id="1-1-stack"><a href="#1-1-stack" class="headerlink" title="1.1 stack"></a>1.1 stack</h2><p>栈为数据结构的一种，是STL中实现的一个先进后出，后进先出的容器  </p><p>头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt;ss;</span><br><span class="line">stack&lt;<span class="type">char</span>&gt;ss;</span><br><span class="line">stack&lt;listnode*&gt;ss;</span><br></pre></td></tr></table></figure><h2 id="1-2-方法函数"><a href="#1-2-方法函数" class="headerlink" title="1.2 方法函数"></a>1.2 方法函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ss.<span class="built_in">push</span>(element);</span><br><span class="line">ss.<span class="built_in">pop</span>();</span><br><span class="line">ss.<span class="built_in">top</span>();</span><br><span class="line">ss.<span class="built_in">empty</span>();</span><br><span class="line">ss.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure><h2 id="1-3-函数访问"><a href="#1-3-函数访问" class="headerlink" title="1.3 函数访问"></a>1.3 函数访问</h2><hr><!-- toc --><h1 id="3-queue"><a href="#3-queue" class="headerlink" title="3. queue"></a>3. queue</h1>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
