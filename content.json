{"posts":[{"title":"技术文档修改版","text":"Obsdian first try lalalalaalaa markdownmarkdown 我怀念的，是无话不说 this is a heading 在Python语言中最常见的括号有三种，分别是：小括号（）、中括号[]、花括号{}；其作用也不相同，分别用来代表不同的Python基本内置数据类型。 Python中的小括号（）： 代表tuple元祖数据类型，元祖是一种不可变序列。创建方法很简单，大多数时候都是小括号括起来的 1 &gt;&gt;&gt; tup = (1,2,3)2 &gt;&gt;&gt; tup3 (1, 2, 3)4 &gt;&gt;&gt; () #空元祖5 ()6 &gt;&gt;&gt; 55,#一个值的元祖7 (55,) Python中的中括号[]： 代表list列表数据类型，列表是一种可变序列。创建方法既简单又特别。 原来list（）是调用函数啊，这样我就好理解的，那意思就是list(‘ABC’)，调用了list这个函数，ABC就形成了一个有3个元素的列表，其中三个元素分别是A、B、C，而X=[‘ABC’]，是本身列了一个列表，里面只有一个元素，元素是ABC 1 &gt;&gt;&gt; list(‘Python’)2 [‘P’, ‘y’, ‘t’, ‘h’, ‘o’, ‘n’] 那如果我要用调用list函数表示一个列表，里面只有一个元素，元素是ABC，怎么表示呢 list([‘ABC’])Python中的花括号{}： 代表dict字典数据类型，字典是Python中唯一内建的映射类型。字典中的值没有特殊的顺序，但都是存储在一个特定的键（key）下。键可以是数字、字符串甚至是元祖。 1 &gt;&gt;&gt; dic = {‘jon’:’boy’,’lili”‘:’girl’}2 &gt;&gt;&gt; dic3 {‘jon’: ‘boy’, ‘lili”‘: ‘girl’}[[我也是一个笔记]]我要讲到的是[[垃圾回收]]","link":"/2024/03/02/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"},{"title":"CPP STL","text":"STL的用法 方便自己回看 1. vector(变长数组)头文件1#include&lt;vector&gt; 初始化1234vector&lt;int&gt;ss;//一维数组vector&lt;int&gt;ss(n+1,0)//n+1个0元素vector&lt;vector&lt;int&gt;&gt;ss;vector&lt;vector&lt;int&gt;&gt;ss[5]//行不可变 列可变长数组 拷贝初始化123vector&lt;int&gt; a(n + 1, 0);vector&lt;int&gt; b(a); // 两个数组中的类型必须相同,a和b都是长度为n+1，初始值都为0的数组vector&lt;int&gt; c = a; // 也是拷贝初始化,c和a是完全一样的数组 vector v[5]可以这样理解：长度为5的v数组，数组中存储的是vector 数据类型，而该类型就是数组形式，故v为二维数组。其中每个数组元素均为空，因为没有指定长度，所以第二维可变长。可以进行下述操作： 12v[1].push_back(2);v[2].push_back(3); 1.2 函数方法STL的函数方法一般分为删除、添加、查找。以数组ss举例 123456789101112ss.front()//展示ss的第一个元素ss.front()//展示ss的最后一个元素ss.push_back(element)//向数组末尾添加一个元素ss.size() 返回实际数据个数（unsigned类型） ss.clear() 清除元素个数O ( N ) O(N)O(N)，N为元素个数ss.resize(n, v) 改变数组大小为n,n个空间数值赋为v，如果没有默认赋值为0 ss.insert(it, x) 向任意迭代器it插入一个元素x 例：ss.insert(ss.begin() + 2,-1) 将-1插入ss[2]的位置ss.erase(first,last) 删除[first,last)的所有元素 ss.begin() 返回首元素的迭代器（通俗来说就是地址） ss.end() 返回最后一个元素后一个位置的迭代器（地址） ss.empty() 判断是否为空，为空返回真，反之返回假 1.3数组的访问1.3.1 下标访问和正常数组一样 123for(int i = 0; i &lt; ss.size(); i++){ cout&lt;&lt;ss[i];} 1.3.2 迭代器访问不细说了 1.3.3 智能指针访问123for(auto val : v) { cout &lt;&lt; val &lt;&lt; &quot; &quot;; //s[0],s[1]...} 2. stack-这是分割线 1.1 stack栈为数据结构的一种，是STL中实现的一个先进后出，后进先出的容器 头文件 1#include&lt;stack&gt; 初始化 123stack&lt;int&gt;ss;stack&lt;char&gt;ss;stack&lt;listnode*&gt;ss; 1.2 方法函数12345ss.push(element);ss.pop();ss.top();ss.empty();ss.size(); 1.3 函数访问 3. queue","link":"/2024/03/02/stl/"},{"title":"java笔记汇总","text":"it is just my personal learning notes# 1序言回想自从系统学完C语言后，很少在系统学一门编程语言，python听得时候天天摆烂，以至于学完了还是一团浆糊，直到大二开始在leetcode刷题才有所深入了解，看来学习还是得付诸于时间才行。正好这段时间在经营博客，有事没事往上面扔点东西，挺好的 2 java基本内容2.1 简介官方白皮书给出了如下关键字：简单性（接近C++）、面向对象（支持多重继承）、分布式、健壮性（优秀的指针模型）、安全性（复杂的安全模型）、体系结构中立（Java虚拟机）、可移植性（众多平台独立的Java库）、解释型（轻量的编译过程）、高性能（即时编译器）、多线程、动态性。 2.2 java的程序结构java程序是以类为单位的，类则是一种自定义数据结构（类似于C中的结构体struct）。上面的程序包含了一个public类型的class（类），Hello是这个类的类名，这名称需和文件名同名。和C语言一样，Java也是大小写敏感的。习惯上将类名的每个单词首字母大写。 这个类中包含了一个main方法（也就是函数），作为这个Java程序的运行起点。这个方法中包含了该程序的所有逻辑，和C非常相似。 2.3数据类型java跟c/c++一样，数据元素有不同的数据类型整型:byte(1字节),short(2个字节),int(4个字节),long(8个字节)浮点类型:float(4字节),double(8字节)字符类型 char布尔类型 boolean 2.4输入输出这点我认为java比较繁琐首先头文件 1import java.util.Scanner; 输入输出 123Scanner in = new Scanner(System.in);System.out.println(in.nextInt());System.out.println(in.nextLine()); 2.5 流程控制流程控制Java中也有块（block）的概念。大多数内容都和C一致，除了嵌套的块中不能声明重名变量。下面说一下流程控制语句： if-else if-else 和C一样while/do-while 和C一样for 和C一样。不过添加了一种for each循环switch 和C一样。不过从Java SE 7 开始，case标签可以是字符串字面量break 后面可以带标签，用法和C中的goto一样。不过只能跳出语句块而不能跳入continue 和C一样 2.6 高精度算法(大数值)这个是一个可以说说的话题，还记着我大一下有门程序设计课，大作业就是完成各种常见的数据结构，其中就有一个高精度算法的C语言实现，但当时gpt水水就完事了，内在逻辑一点不清楚，看acwing的时候，惊奇听人说python一行就完事儿。 1print(int(input())*int(input())) 注意这里是分行输入 看来以后还得写篇python而java的实现 1BigInterger a = BigInterger.valueOf(100); 2.7 数组这个东西还挺烦人，刚学的时候一直记不住 123int []ss = new int [100]//和cpp不一样的是，[]在前面写着int []ss = {4,5,6,7};a = {1,2,3};","link":"/2024/03/08/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%B1%87%E6%80%BB/"},{"title":"","text":"111","link":"/2024/03/09/test/"}],"tags":[{"name":"技术","slug":"技术","link":"/tags/%E6%8A%80%E6%9C%AF/"},{"name":"文档","slug":"文档","link":"/tags/%E6%96%87%E6%A1%A3/"},{"name":"语言","slug":"语言","link":"/tags/%E8%AF%AD%E8%A8%80/"}],"categories":[{"name":"编程","slug":"编程","link":"/categories/%E7%BC%96%E7%A8%8B/"},{"name":"markdown测试","slug":"markdown测试","link":"/categories/markdown%E6%B5%8B%E8%AF%95/"},{"name":"java","slug":"编程/java","link":"/categories/%E7%BC%96%E7%A8%8B/java/"}],"pages":[]}