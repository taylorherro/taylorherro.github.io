{"posts":[{"title":"技术文档修改版","text":"Obsdian first try lalalalaalaa markdownmarkdown 我怀念的，是无话不说 this is a heading 在Python语言中最常见的括号有三种，分别是：小括号（）、中括号[]、花括号{}；其作用也不相同，分别用来代表不同的Python基本内置数据类型。 Python中的小括号（）： 代表tuple元祖数据类型，元祖是一种不可变序列。创建方法很简单，大多数时候都是小括号括起来的 1 &gt;&gt;&gt; tup = (1,2,3)2 &gt;&gt;&gt; tup3 (1, 2, 3)4 &gt;&gt;&gt; () #空元祖5 ()6 &gt;&gt;&gt; 55,#一个值的元祖7 (55,) Python中的中括号[]： 代表list列表数据类型，列表是一种可变序列。创建方法既简单又特别。 原来list（）是调用函数啊，这样我就好理解的，那意思就是list(‘ABC’)，调用了list这个函数，ABC就形成了一个有3个元素的列表，其中三个元素分别是A、B、C，而X=[‘ABC’]，是本身列了一个列表，里面只有一个元素，元素是ABC 1 &gt;&gt;&gt; list(‘Python’)2 [‘P’, ‘y’, ‘t’, ‘h’, ‘o’, ‘n’] 那如果我要用调用list函数表示一个列表，里面只有一个元素，元素是ABC，怎么表示呢 list([‘ABC’])Python中的花括号{}： 代表dict字典数据类型，字典是Python中唯一内建的映射类型。字典中的值没有特殊的顺序，但都是存储在一个特定的键（key）下。键可以是数字、字符串甚至是元祖。 1 &gt;&gt;&gt; dic = {‘jon’:’boy’,’lili”‘:’girl’}2 &gt;&gt;&gt; dic3 {‘jon’: ‘boy’, ‘lili”‘: ‘girl’}[[我也是一个笔记]]我要讲到的是[[垃圾回收]]","link":"/2024/03/02/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"},{"title":"Hello World","text":"hello World; Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2024/03/02/hello-world/"},{"title":"CPP STL","text":"STL的用法 方便自己回看 1.vector(变长数组)头文件1#include&lt;vector&gt; 初始化1234vector&lt;int&gt;ss;//一维数组vector&lt;int&gt;ss(n+1,0)//n+1个0元素vector&lt;vector&lt;int&gt;&gt;ss;vector&lt;vector&lt;int&gt;&gt;ss[5]//行不可变 列可变长数组 拷贝初始化123vector&lt;int&gt; a(n + 1, 0);vector&lt;int&gt; b(a); // 两个数组中的类型必须相同,a和b都是长度为n+1，初始值都为0的数组vector&lt;int&gt; c = a; // 也是拷贝初始化,c和a是完全一样的数组 vector v[5]可以这样理解：长度为5的v数组，数组中存储的是vector 数据类型，而该类型就是数组形式，故v为二维数组。其中每个数组元素均为空，因为没有指定长度，所以第二维可变长。可以进行下述操作： 12v[1].push_back(2);v[2].push_back(3); 1.2 函数方法STL的函数方法一般分为删除、添加、查找。以数组ss举例 123456789101112ss.front()//展示ss的第一个元素ss.front()//展示ss的最后一个元素ss.push_back(element)//向数组末尾添加一个元素ss.size() 返回实际数据个数（unsigned类型） ss.clear() 清除元素个数O ( N ) O(N)O(N)，N为元素个数ss.resize(n, v) 改变数组大小为n,n个空间数值赋为v，如果没有默认赋值为0 ss.insert(it, x) 向任意迭代器it插入一个元素x 例：ss.insert(ss.begin() + 2,-1) 将-1插入ss[2]的位置ss.erase(first,last) 删除[first,last)的所有元素 ss.begin() 返回首元素的迭代器（通俗来说就是地址） ss.end() 返回最后一个元素后一个位置的迭代器（地址） ss.empty() 判断是否为空，为空返回真，反之返回假 1.3数组的访问1.3.1 下标访问和正常数组一样 123for(int i = 0; i &lt; ss.size(); i++){ cout&lt;&lt;ss[i];} 1.3.2 迭代器访问不细说了 1.3.3 智能指针访问123for(auto val : v) { cout &lt;&lt; val &lt;&lt; &quot; &quot;; //s[0],s[1]...} 下一章 string","link":"/2024/03/02/stl/"}],"tags":[{"name":"技术","slug":"技术","link":"/tags/%E6%8A%80%E6%9C%AF/"},{"name":"文档","slug":"文档","link":"/tags/%E6%96%87%E6%A1%A3/"}],"categories":[],"pages":[]}